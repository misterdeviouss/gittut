Branching
A seperate version of the code being used to create and test new features. It is like a seperate timeline.
As a standard practice, we never directly change the master branch. We build features in a branch and then merge it with the master branch.
On the remote repo (github), your branch resides as upstream branch

git push --set-upstream origin hiteshbranch

HEAD: The pointer to the current branch where the commits will be made

git checkout -b branchname OR git branch branchname
creates a new branch. Checkout directly moves you to the branch.

git branch -d branchname
delete a branch
git push origin -d hiteshbranch
delete branch from remote repo

git checkout branchname
switch to the branch

git merge branchname
merge branchname's changes into the current branch
To merge into master, switch to master and git merge branchname

Merge conflicts: Two changes on the same line/file by different devs.
See image for resolving.
Use vscode to solve or change the file and save it. Only one change will be expected.
You need to commit this as well (merge conflict is a merge that needs a commit)
