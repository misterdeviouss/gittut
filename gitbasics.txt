Git is a version control system
Github is an online website that allows us to host git repositories

Use cases of git:
1. Tracking changes of your respositories
2. Participating in open source contribs

git config --global user.email "you@example.com"
git config --global user.name "Your Name"
Now when you push or commit, you will be asked for your git account
Your git config is present in home folder

git init
initializes a git repository and creates .git hidden folder (dir /A or ls -a)

git status
Displays what changes took place and what untracked files are present in the current repository

Untracked files: Files that are currently not been tracked by git in the current repository
Modified files: Tracked files that have new changes that are not committed
Staging area: Area where files are kept when ready to be committed.

Changing a file in staging area file will put a copy of it out of the staging area where the changes
are present as a "modified" file

git add . or git add filename1 filename2
adds untracked file or its changes to the staging area for comitting

git commit -m "message" -m "description"
Commit the changes or the new file
always write messages that properly describe your commit in brief
description can be used to describe your commit in detail
Do atomic commits: one commit = one bugfix or one feature or one upgrade
Every commit depends on its previous commit

git restore filename
removes the file from staging area and revert changes to files

git log
shows history of commits

git log --oneline
Shorter history of commits

git reset commitID
resets your git respository to a particular commit
obtain commit ID from git log, then run git reset commitid to remove all commits after this




.gitignore file
Helps you to ignore certain filetypes in your folder. It guarantees that these filetypes won't ever be commited (even accidently)
Just write filename/folder in each line of gitignore file
You can use a gitignore generator online to get pre configured gitignore files



Linking your git repository to a github respository

git remote add origin url
git remote set-url origin url ==> changes the URL of remote repo

remote: you are working with "remote" repos
origin: the default name of the remote repo

git push origin master
pushes the changes from your local repo to the remote repo in the branch mentioned
it will ask for authentication via username/pass or browser or tokens

https://www.youtube.com/watch?v=LIHIRBz5ZXk&ab_channel=TechJourneywithAnna
git origin vs remote




Upstream
It is the original repo URL from where the repo was forked from
git remote add upstream url

git fetch --all --prune: brings all changes in upstream main branch into your code
git reset --hard: fixes the changes
or just git pull upstream
or git fetch
and git merge
